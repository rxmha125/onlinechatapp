<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App with Reply</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
           body {
    background-color: #1a202c;
    color: #e2e8f0;
}
.container {
    width: 100%;
    max-width: 450px;
    height: 600px;
    margin: 0 auto;
    padding: 1rem;
    background: #2d3748;
    border-radius: 12px;
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: column;
}
.messages {
    flex-grow: 1;
    overflow-y: auto;
    margin-bottom: 1rem;
    padding: 1rem;
    background: #1a202c;
    border-radius: 8px;
    scrollbar-width: thin;
}
.messages::-webkit-scrollbar {
    width: 6px;
}
.messages::-webkit-scrollbar-thumb {
    background: #4a5568;
    border-radius: 8px;
}
.message-container {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin-bottom: 1rem;
}
.message {
    background-color: #4a5568;
    padding: 0.75rem;
    border-radius: 12px;
    flex-grow: 1;
    color: #f7fafc;
}
.message.right {
    background-color: #3182ce;
    align-self: flex-end;
}
.username {
    font-size: 0.85rem;
    font-weight: bold;
    margin-bottom: 0.2rem;
    color: #a0aec0;
}
.reply-btn {
    background: none;
    border: none;
    color: #a0aec0;
    cursor: pointer;
    font-size: 1rem;
    margin-left: 0.5rem;
}
.reply-btn:hover {
    color: #63b3ed;
}
.seen-status {
    font-size: 0.75rem;
    color: #00df68;
    margin-top: 0.5rem;
}
.msg-box {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.msg-box input {
    flex-grow: 1;
    padding: 0.75rem;
    border: 1px solid #4a5568;
    border-radius: 8px;
    background-color: #2d3748;
    color: #e2e8f0;
    outline: none;
    transition: border-color 0.2s ease;
}
.msg-box input:focus {
    border-color: #63b3ed;
}
.msg-box button {
    padding: 0.75rem 1rem;
    background-color: #3182ce;
    border: none;
    border-radius: 8px;
    color: #f7fafc;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s ease;
}
.msg-box button:hover {
    background-color: #2b6cb0;
}
#replyBanner {
    font-size: 0.9rem;
    background: #4a5568;
    padding: 0.5rem;
    border-radius: 8px;
    margin-bottom: 1rem;
}
    </style>
</head>
<body class="flex justify-center items-center min-h-screen">
    <div class="container">
        <div id="replyBanner" class="text-gray-300 mb-2 hidden"></div>
        <h1 id="status" class="text-center text-lg font-bold mb-4">Connecting...</h1>
        <div id="messages" class="messages"></div>
        <div class="msg-box">
            <input id="messageInput" type="text" placeholder="Enter your message">
            <button id="sendButton">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
    <script>
        const socket = io();
        let userId = null;
        let replyToMessageId = null;
        let typingTimeout;
    
        socket.on('userId', (id) => {
            userId = id;
        });
    
        socket.on('status', (status) => {
            const statusEl = document.getElementById('status');
            statusEl.textContent = status === 'connected' ? 'Connected' : 'Connecting...';
            statusEl.style.color = status === 'connected' ? '#38a169' : '#e53e3e';
        });
    
        const sendMessage = () => {
            const messageInput = document.getElementById('messageInput');
            const messageText = messageInput.value.trim();
    
            if (messageText) {
                if (replyToMessageId) {
                    const replyData = {
                        replyText: messageText,
                        originalMessageId: replyToMessageId,
                        originalSenderId: userId,
                    };
                    socket.emit('replyMessage', replyData);
                    addMessage({ text: `You replied: ${messageText}`, id: userId }, 'right');
                    clearReplyBanner();
                } else {
                    const messageData = {
                        id: userId,
                        text: messageText,
                        timestamp: Date.now(),
                    };
                    addMessage(messageData, 'right');
                    socket.emit('message', messageData);
                }
                messageInput.value = '';
            }
        };
    
        document.getElementById('sendButton').addEventListener('click', sendMessage);
    
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    
        // Typing feature
        const messageInput = document.getElementById('messageInput');
        messageInput.addEventListener('input', () => {
            socket.emit('typing', userId);
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('stopTyping', userId);
            }, 2000);
        });
    
        socket.on('typing', (typingUserId) => {
            if (typingUserId !== userId) {
                showTypingIndicator(typingUserId);
            }
        });
    
        socket.on('stopTyping', (typingUserId) => {
            if (typingUserId !== userId) {
                hideTypingIndicator(typingUserId);
            }
        });
    
        socket.on('message', (msg) => {
            addMessage(msg, 'left');
            socket.emit('messageSeen', { messageId: msg.timestamp, senderId: msg.id });
        });
    
        socket.on('replyMessage', (data) => {
            const replyText = `Reply to ${data.originalMessageId}: ${data.replyText}`;
            addMessage({ text: replyText, id: data.senderId }, 'left');
        });
    
        socket.on('messageSeen', (data) => {
            const messageDiv = document.querySelector(`[data-message-id="${data.messageId}"]`);
            if (messageDiv) {
                const seenStatus = document.createElement('p');
                seenStatus.classList.add('seen-status');
                seenStatus.textContent = 'Seen';
                messageDiv.appendChild(seenStatus);
            }
        });
    
        function addMessage(msg, side) {
            const messages = document.getElementById('messages');
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('message-container');
    
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', side === 'right' ? 'right' : 'left');
            messageDiv.dataset.messageId = msg.timestamp;
    
            const usernameP = document.createElement('p');
            usernameP.classList.add('username');
            usernameP.textContent = msg.id === userId ? 'You' : `User: ${msg.id}`;
    
            const textP = document.createElement('p');
            textP.textContent = msg.text;
    
            const replyBtn = document.createElement('button');
            replyBtn.classList.add('reply-btn');
            replyBtn.textContent = 'Reply';
            replyBtn.onclick = () => {
                replyToMessageId = msg.timestamp;
                showReplyBanner(msg.text);
            };
    
            messageDiv.appendChild(usernameP);
            messageDiv.appendChild(textP);
            messageDiv.appendChild(replyBtn);
            messageContainer.appendChild(messageDiv);
            messages.appendChild(messageContainer);
    
            messages.scrollTop = messages.scrollHeight;
        }
    
        function showReplyBanner(text) {
            const replyBanner = document.getElementById('replyBanner');
            replyBanner.textContent = `Replying to: "${text}"`;
            replyBanner.classList.remove('hidden');
        }
    
        function clearReplyBanner() {
            const replyBanner = document.getElementById('replyBanner');
            replyBanner.textContent = '';
            replyBanner.classList.add('hidden');
            replyToMessageId = null;
        }
    
        function showTypingIndicator(userId) {
            const typingBanner = document.getElementById('replyBanner');
            typingBanner.textContent = `User ${userId} is typing...`;
            typingBanner.classList.remove('hidden');
        }
    
        function hideTypingIndicator(userId) {
            const typingBanner = document.getElementById('replyBanner');
            if (typingBanner.textContent.includes(`User ${userId} is typing...`)) {
                typingBanner.classList.add('hidden');
            }
        }
    </script>
    
</body>
</html>
